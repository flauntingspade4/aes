use crate::block::Block;

pub const fn s_box(input: u8) -> u8 {
    let x = input >> 4;
    let y = input & 0x0f;

    FORWARD_S_BOX[x as usize][y as usize]
}

pub struct KeyExpander<'a> {
    round_constant: core::slice::Iter<'a, u8>,
    key: Block,
}

impl<'a> KeyExpander<'a> {
    pub fn new(key: Block) -> Self {
        Self {
            round_constant: [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36].iter(),
            key,
        }
    }
    pub fn all_round_keys(key: Block) -> [Block; 10] {
        let mut keys = [Block::new([0; 16]); 10];

        let mut expander = Self::new(key);

        for key in keys.iter_mut() {
            *key = expander.next_key();
        }

        keys
    }
    /// Returns the next key
    ///
    /// # Panics
    /// If this function is called more than 10 times, it will panic, as there
    /// are no more round constants stored.
    pub fn next_key(&mut self) -> Block {
        let old_key = self.key;

        let mut last = self.key.0[3];

        last.rotate_left(1);

        for byte in &mut last {
            *byte = s_box(*byte);
        }

        let round_constant = self
            .round_constant
            .next()
            .expect("KeyExpander::next_key was called too many times");

        self.key.0[0] = xor_row(xor_row(old_key.0[0], last), [*round_constant, 0, 0, 0]);

        for i in 1..4 {
            self.key.0[i] = xor_row(self.key.0[i - 1], old_key.0[i]);
        }

        self.key
    }
}

/// xors together two rows
const fn xor_row(lhs: [u8; 4], rhs: [u8; 4]) -> [u8; 4] {
    [
        lhs[0] ^ rhs[0],
        lhs[1] ^ rhs[1],
        lhs[2] ^ rhs[2],
        lhs[3] ^ rhs[3],
    ]
}

const FORWARD_S_BOX: [[u8; 16]; 16] = [
    [
        0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab,
        0x76,
    ],
    [
        0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72,
        0xc0,
    ],
    [
        0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31,
        0x15,
    ],
    [
        0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2,
        0x75,
    ],
    [
        0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f,
        0x84,
    ],
    [
        0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58,
        0xcf,
    ],
    [
        0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f,
        0xa8,
    ],
    [
        0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3,
        0xd2,
    ],
    [
        0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19,
        0x73,
    ],
    [
        0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b,
        0xdb,
    ],
    [
        0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4,
        0x79,
    ],
    [
        0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae,
        0x08,
    ],
    [
        0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b,
        0x8a,
    ],
    [
        0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d,
        0x9e,
    ],
    [
        0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28,
        0xdf,
    ],
    [
        0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb,
        0x16,
    ],
];

#[test]
fn s_box_test() {
    assert_eq!(s_box(0x11), 0x82);

    assert_eq!(s_box(0xa7), 0x5c);

    assert_eq!(s_box(0xfe), 0xbb);

    assert_eq!(s_box(0xef), 0xdf);

    assert_eq!(s_box(0xff), 0x16);
}

#[test]
fn round_key_test() {
    let key = Block::new([
        0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f,
        0x3c,
    ]);

    let mut key_expander = KeyExpander::new(key);

    assert_eq!(
        key_expander.next_key(),
        Block::new([
            0xa0, 0xfa, 0xfe, 0x17, 0x88, 0x54, 0x2c, 0xb1, 0x23, 0xa3, 0x39, 0x39, 0x2a, 0x6c,
            0x76, 0x05
        ])
    );

    assert_eq!(
        key_expander.next_key(),
        Block::new([
            0xf2, 0xc2, 0x95, 0xf2, 0x7a, 0x96, 0xb9, 0x43, 0x59, 0x35, 0x80, 0x7a, 0x73, 0x59,
            0xf6, 0x7f
        ])
    );
}
